// reads two IR proximity/line-detectors.  reports time between triggers.
// uses interrupts.  First one should go high for detect on 2
// second detector should go high on detect on pin 3
// created by antonin.dighera@gmail.com 6/8/2018
// Last revised 5/12/20201

#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128                                                  // OLED display width, in pixels
#define SCREEN_HEIGHT 32                                                  // OLED display height, in pixels                 
#define OLED_RESET    -1                                                  // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET); // Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define theLawrence_WIDTH  128                                            // Bitmap Width in pixels
#define theLawrence_HEIGHT 32                                             // Bitmap Height in pixels

const unsigned char PROGMEM theLawrence [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x7F, 0xFC, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x7F, 0xFC, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x7F, 0xFC, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0F, 0x1F, 0xE1, 0xF8, 0x0E, 0x01, 0xFB, 0xCF, 0x1F, 0xF9, 0xF9, 0xFE, 0x1F, 0x87, 0xE0, 0x00,
0x0F, 0x1F, 0xF3, 0xFC, 0x0E, 0x03, 0xFD, 0xCF, 0x3F, 0xFB, 0xF9, 0xFF, 0x3F, 0xCF, 0xF0, 0x00,
0x0F, 0x1F, 0xF7, 0xFE, 0x0E, 0x07, 0xFF, 0xEF, 0x3B, 0xFF, 0xFD, 0xFF, 0x7F, 0xFF, 0xF8, 0x00,
0x0F, 0x1E, 0x7F, 0x8E, 0x0E, 0x01, 0x8F, 0xEF, 0xBB, 0xC7, 0x1D, 0xE7, 0x79, 0xFE, 0x78, 0x00,
0x0F, 0x1C, 0x7F, 0xFE, 0x0E, 0x03, 0xFE, 0xFF, 0xFB, 0xCF, 0xFF, 0xE7, 0x70, 0x9F, 0xF8, 0x00,
0x0F, 0x1C, 0x7F, 0xFE, 0x0E, 0x07, 0xFE, 0xFF, 0xFB, 0x8F, 0xFF, 0xC7, 0x70, 0x1F, 0xF8, 0x00,
0x0F, 0x1C, 0x7F, 0x88, 0x0E, 0x07, 0x9E, 0xFF, 0xF3, 0x8F, 0x11, 0xC7, 0x79, 0xFC, 0x20, 0x00,
0x0F, 0x1C, 0x7F, 0xFE, 0x0F, 0xFF, 0xFE, 0x79, 0xF3, 0x87, 0xFD, 0xC7, 0x7F, 0xFF, 0xF8, 0x00,
0x0F, 0x1C, 0x7B, 0xFC, 0x0F, 0xFB, 0xFE, 0x79, 0xE3, 0x83, 0xFD, 0xC7, 0x3F, 0xCF, 0xF0, 0x00,
0x0F, 0x1C, 0x79, 0xF8, 0x0F, 0xFB, 0xEE, 0x78, 0xE3, 0x81, 0xF9, 0xC7, 0x1F, 0x07, 0xE0, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x3B, 0xC0, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
0x1E, 0x1C, 0x00, 0x2A, 0x40, 0x00, 0x3E, 0x03, 0xE0, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00,
0x1A, 0x14, 0x00, 0x2A, 0x40, 0x00, 0x22, 0x06, 0x38, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00,
0x12, 0x14, 0x00, 0x2A, 0x40, 0x00, 0x2E, 0x0D, 0xEC, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00,
0x12, 0x14, 0x7C, 0x2A, 0x40, 0x78, 0xEE, 0x0B, 0x38, 0x7C, 0x78, 0x78, 0x7F, 0x03, 0xE0, 0xF8,
0x12, 0x14, 0xC7, 0x2A, 0x41, 0xCE, 0x82, 0x0B, 0x10, 0xC6, 0x49, 0x8E, 0x59, 0x8E, 0x31, 0x8C,
0x13, 0xF5, 0xB9, 0x2A, 0x41, 0x03, 0x82, 0x09, 0xF1, 0x93, 0x4B, 0x72, 0x4E, 0x49, 0x9B, 0x76,
0x10, 0x05, 0xED, 0x2A, 0x43, 0x79, 0xEE, 0x0C, 0x1B, 0x7D, 0x4A, 0xDB, 0x4A, 0x5B, 0xDE, 0xDA,
0x10, 0x04, 0xFD, 0xAA, 0x42, 0xCD, 0x28, 0x07, 0xCE, 0x46, 0x4A, 0xF9, 0x53, 0x56, 0x34, 0xFB,
0x13, 0xF5, 0x81, 0xAA, 0x42, 0x85, 0x28, 0x04, 0x66, 0x40, 0x4E, 0x01, 0x51, 0x54, 0x04, 0x01,
0x12, 0x15, 0x3D, 0xAA, 0x42, 0xCD, 0x28, 0x0E, 0x36, 0x47, 0x4A, 0xFF, 0x51, 0x56, 0x34, 0xFF,
0x12, 0x15, 0x7D, 0xAA, 0x43, 0x79, 0x28, 0x1B, 0xEF, 0x7D, 0x4A, 0xFF, 0x51, 0x5B, 0xCE, 0xFE,
0x12, 0x15, 0x05, 0xAA, 0x41, 0x82, 0x28, 0x0C, 0x09, 0x83, 0x4B, 0x06, 0x51, 0x48, 0x1B, 0x06,
0x1E, 0x1D, 0xDF, 0xBB, 0xC0, 0xEE, 0x38, 0x07, 0xF8, 0xFE, 0x79, 0xFC, 0x71, 0xC7, 0xF1, 0xFC,
0x00, 0x00, 0x70, 0x00, 0x00, 0x38, 0x00, 0x01, 0xE0, 0x38, 0x00, 0x78, 0x00, 0x01, 0xC0, 0x70
};               

unsigned long t1=0;                                 
unsigned long t2=0;                                         
float x;
float y;
float z;

void sens1() { if ((t1==0) && (t2==0)) t1=micros(); } 
void sens2() { if ((t2==0) && (t1!=0)) t2=micros(); }

void setup() {
  pinMode(2,INPUT);
  pinMode(3,INPUT);
  pinMode(4,OUTPUT);
  attachInterrupt(digitalPinToInterrupt(2),sens1,RISING);
  attachInterrupt(digitalPinToInterrupt(3),sens2,RISING);
  Serial.begin(57600); //initializes serial connection at 57600 baud
  
   if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {     // Address 0x3C for 128x32
      Serial.println(F("SSD1306 allocation failed"));
      for(;;);                                          // Don't proceed, loop forever
    }
    
  display.clearDisplay();                               // Clear the buffer
  display.drawBitmap(0, 0,  theLawrence, 128, 32, 1);   // Draws the brand logo
  display.display();                                    // Updates display buffer 
  delay(4000);                                          // Pause for 2 seconds
  display.clearDisplay();                               // Clear the buffer
  display.display();                                    // Updates display buffer
  delay(1000);                                          // Pause for one second
  sass();                                               // Initialize sass

}

void loop() {
  digitalWrite(4,t1?HIGH:LOW);      
  if (t2>0)
    {
        x = t2-t1;                              // Assign x to the difference between the variables t1 and t2, result will be in microseconds
        y = 1000000;                            // Assign y as 1,000,000
        z = x / y;                              // converts time from microseconds to seconds
        /*
        Serial.println("*******************");
        Serial.println(z,6);                    // Prints time in seconds with 6 decimal places
        Serial.println("SECONDS");              // Prints the string
        Serial.println("*******************");  // uncomment this if you want to use the serial monitor as well as the OLED display 
        */ 
        display.clearDisplay();                 // Clears display buffer
        display.setTextSize(2);                 // Normal 1:1 pixel scale
        display.setTextColor(WHITE);            // Draw white text
        display.setCursor(0,0);                 // Start at top-left corner
        display.println(z,6);                   // Prints time in seconds with 6 decimal places
        display.println(F( "SECONDS"));         // Prints the string
        display.display();                      // Updates display buffer
        x = 0;                                  // Sets variable to 0
        y = 0;                                  // Sets variable to 0
        z = 0;                                  // Sets variable to 0
        t1=t2=0;                                // Sets variables to 0
    }
}

void sass(void){
  
  display.clearDisplay();             // Clears display buffer
  display.setTextSize(2);             // Normal 1:1 pixel scale
  display.setTextColor(WHITE);        // Draw white text
  display.setCursor(0,0);             // Start at top-left corner
  display.println(F( "WAITING"));     // Prints the string
  display.println(F( "ON YOU..."));   // Prints the string
  display.display();                  // Updates display buffer

}
